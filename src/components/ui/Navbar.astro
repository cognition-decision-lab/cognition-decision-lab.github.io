---
import {profile} from '../../settings'

const {fullName, title} = profile
---
<aside
  class='pl-8 pr-8 pt-8 pb-8 h-screen w-[20rem] bg-[#53607a] text-base-200 flex flex-col rounded-2xl shadow-lg'
>
	<div class='flex flex-col my-8 justify-between h-full'>
    <div>
      <div class='mx-4 mt-8'>
  <ul class='space-y-4 menu grow shrink menu-md overflow-y-auto rounded-xl'>
          <li>
            <a href={`/`} class='text-lg'>
              <i class="fa-solid fa-house mr-2"></i>Home
            </a>
          </li>
          <li>
            <a href={`/people`} class='text-lg'>
              <i class="fa-solid fa-users mr-2"></i>People
            </a>
          </li>
          <li>
            <a href={`/projects`} class='text-lg'>
              <i class="fa-solid fa-diagram-project mr-2"></i>Projects
            </a>
          </li>
          <li class="menu-dropdown">
            <details>
              <summary class="text-lg cursor-pointer flex items-center">
                <i class="fa-solid fa-file-lines mr-4"></i>
                <span>Papers</span>
              </summary>
              <ul class="ml-4">
                <li><a href={`/papers#economic-decision-making`} class="text-base"><i class="fa-solid fa-eye mr-2"></i>Economic Decision Making with Limited Attention</a></li>
                <li><a href={`/papers#bounded-rationality`} class="text-base"><i class="fa-solid fa-chart-line mr-2"></i>Bounded Rationality in Macroeconomics</a></li>
                <li><a href={`/papers#behavioral-economic-links`} class="text-base"><i class="fa-solid fa-puzzle-piece mr-2"></i>Links Between Behavioral and Economic Phenomena</a></li>
                <li><a href={`/papers#neuroeconomics`} class="text-base"><i class="fa-solid fa-brain mr-2"></i>Neuroeconomics</a></li>
                <li><a href={`/papers#other`} class="text-base"><i class="fa-solid fa-ellipsis mr-2"></i>Other</a></li>
              </ul>
            </details>
          </li>
          <li>
            <a href={`/links`} class='text-lg'>
              <i class="fa-solid fa-link mr-2"></i>Links
            </a>
          </li>
        </ul>
      </div>
      <div class="mt-8 mx-4">
  
      </div>
		</div>
	</div>
</aside>

<script>
  (function () {
  // NOTE [anchor-scroll + ClientRouter]:
  // Astro's ClientRouter attaches click handlers that can reset scroll position
  // on navigation. For in-page anchors within /papers, that can result in jumps
  // to the top before our smooth scroll runs. We work around this by:
  // 1) Intercepting submenu anchor interactions early (pointerdown + capture-phase click)
  //    and calling preventDefault + stopImmediatePropagation to preempt the router.
  // 2) Performing our own smooth scrolling and updating the URL hash with history.replaceState.
  // 3) On cross-page navigations into /papers, we persist the target in sessionStorage and,
  //    on arrival, run a short retry loop to outlast any router scroll-to-top behavior.
  //
  // Future hardening (if sporadic top jumps return): after calling scrollIntoView, measure
  // the target's bounding rect (getBoundingClientRect). If the element's top isn't within
  // a small threshold from the expected position (e.g., |top - 0| > 4px when using block:'start'),
  // trigger another scroll attempt and/or extend the retry window. As a last resort, perform
  // a one-time hard navigation to /papers#<anchor> for that click.

    const scrollAndOpen = (anchor) => {
      const el = document.getElementById(anchor);
      if (!el) return;
  el.scrollIntoView({ behavior: 'smooth', block: 'start' });
      el.classList.add('highlight-section');
      setTimeout(() => el.classList.remove('highlight-section'), 1200);
      const active = document.querySelector(`a[href="/papers#${CSS.escape(anchor)}"]`);
      const details = active ? active.closest('details') : null;
      if (details) details.open = true;
    };

    const init = () => {
      // Delegate clicks for stability across navigations
      if (!document.__cdlPapersDelegateBound) {
        const shouldHandle = (evt) => {
          if (!(evt.target instanceof Element)) return { ok: false };
          const a = evt.target.closest('a');
          if (!a) return { ok: false };
          const href = a.getAttribute('href') || '';
          if (!href.startsWith('/papers#')) return { ok: false };
          // Respect new-tab/middle-click and modifier keys
          const mouse = evt;
          const isModified = !!(mouse.metaKey || mouse.ctrlKey || mouse.shiftKey || mouse.altKey);
          const isMiddle = (mouse.button !== undefined && mouse.button === 1);
          if (isModified || isMiddle) return { ok: false };
          const anchor = href.split('#')[1] || '';
          return { ok: true, anchor, href, a };
        };

  // Early interception to prevent ClientRouter from kicking in
        const preempt = (e) => {
          const res = shouldHandle(e);
          if (!res.ok) return;
          try { e.preventDefault(); } catch {}
          try { e.stopImmediatePropagation(); } catch {}
          try { e.stopPropagation(); } catch {}
        };

        const handler = (e) => {
          const target = e.target instanceof Element ? e.target.closest('a') : null;
          if (!target) return;
          const href = target.getAttribute('href') || '';
          if (!href.startsWith('/papers#')) return;
          const anchor = href.split('#')[1] || '';
          // Intercept before Astro's router (capture) and block others
          try { e.preventDefault(); } catch {}
          try { e.stopImmediatePropagation(); } catch {}
          try { e.stopPropagation(); } catch {}
          const inPapers = window.location.pathname.startsWith('/papers');
          if (inPapers) {
            scrollAndOpen(anchor);
            try { history.replaceState(null, '', href); } catch {}
          } else {
            // Client-side navigate to /papers, then scroll on arrival
            try { sessionStorage.setItem('cdl-papers-anchor', anchor); } catch {}
            const a = document.createElement('a');
            a.href = '/papers';
            a.style.display = 'none';
            document.body.appendChild(a);
            a.click();
            setTimeout(() => a.remove(), 0);
          }
        };
  // Capture-phase to run before ClientRouter handlers
        document.addEventListener('pointerdown', preempt, { passive: false, capture: true });
        document.addEventListener('click', handler, { passive: false, capture: true });
        document.__cdlPapersDelegateBound = true;
      }

      // If landing on /papers, scroll to hash or stored anchor and keep submenu open
      if (window.location.pathname.startsWith('/papers')) {
        let anchor = window.location.hash ? window.location.hash.slice(1) : '';
        if (!anchor) {
          try {
            anchor = sessionStorage.getItem('cdl-papers-anchor') || '';
            if (anchor) {
              sessionStorage.removeItem('cdl-papers-anchor');
              try { history.replaceState(null, '', `/papers#${anchor}`); } catch {}
            }
          } catch {}
        }
        if (anchor) {
          // Retry a few times to outlast any router scroll-to-top
          // Consider verifying with getBoundingClientRect if flakes are observed.
          let attempts = 0;
          const max = 12; // ~600ms with 50ms steps
          const tryScroll = () => {
            attempts++;
            scrollAndOpen(anchor);
            if (attempts < max) setTimeout(tryScroll, 50);
          };
          // Allow layout to settle using two rAFs, then start retries
          requestAnimationFrame(() => requestAnimationFrame(() => setTimeout(tryScroll, 0)));
        }
      }
    };

    if (document.readyState !== 'loading') init();
    else document.addEventListener('DOMContentLoaded', init, { once: true });

    // Handle Astro client-side navigations as well
    const onAstroLoad = () => {
      init();
    };

    document.addEventListener('astro:page-load', onAstroLoad);
    document.addEventListener('astro:after-swap', onAstroLoad);
  })();
</script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
<style>
    .columbia-logo-menu {
      /* Use the same color as text-base-content for the logo */
      filter: brightness(0) saturate(100%) invert(0%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(1);
      /* Set the logo color using mix-blend-mode and currentColor */
      mix-blend-mode: multiply;
      color: var(--tw-text-base-content, #1f2937);
    }
  .highlight-section {
    box-shadow: 0 0 0 4px #2563eb;
    transition: box-shadow 0.3s;
  }
</style>
